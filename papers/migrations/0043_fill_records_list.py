# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-08-30 08:49
from __future__ import unicode_literals

from bulk_update.helper import bulk_update
from collections import defaultdict
import django.contrib.postgres.fields.jsonb
from django.db import migrations
from papers.utils import canonicalize_url
from papers.utils import datetime_to_date
from papers.categories import PAPER_TYPE_PREFERENCE
from papers.baremodels import BareOaiRecord

def add_oairecord(self, oairecord):
    """
    Adds a new OAI record to the paper

    :returns: the :class:`BareOaiRecord` that was added (it can differ in subclasses)
    """
    print oairecord.pk
    print oairecord.source_id
    print oairecord.source
    print oairecord.serialize()
    print oairecord.__dict__
    print 
    print oairecord._state.__dict__
    oairecord.check_mandatory_fields()
    oairecord.cleanup_description()
    
    # Search for an existing record that would match
    # the URLs we are trying to add
    matching_idx = None
    match = None
    new_short_splash = canonicalize_url(oairecord.splash_url)
    new_short_pdf = canonicalize_url(oairecord.pdf_url)
    for idx, rec in enumerate(map(BareOaiRecord.deserialize,
self.records_list)):
        short_splash = canonicalize_url(rec.splash_url)
        short_pdf = canonicalize_url(rec.pdf_url)
        if (rec.identifier == oairecord.identifier or
            new_short_splash == short_splash or
            (short_pdf and new_short_pdf == short_pdf)):
            matching_idx = idx
            match = rec
            break

    if matching_idx is None:
        self.records_list.append(oairecord.serialize())
    else:
        # Update the matching record with the newer values
        # (only if needed)
        splash_url = oairecord.splash_url
        pdf_url = oairecord.pdf_url            
        source = oairecord.source

        if (pdf_url != None and (match.pdf_url == None or
            (match.pdf_url != pdf_url and match.priority <
                        source.priority))):
            match.source = source
            match.priority = source.priority
            match.pdf_url = pdf_url
            match.splash_url = splash_url

        def update_field_conditionally(field):
            new_val = getattr(oairecord, field, '')
            if new_val and (len(getattr(match, field) or '') < len(new_val)):
                setattr(match, field, new_val)

        update_field_conditionally('contributors')
        update_field_conditionally('keywords')
        update_field_conditionally('description')
        update_field_conditionally('doi')

        new_pubtype = oairecord.pubtype
        if new_pubtype in PAPER_TYPE_PREFERENCE:
            idx = PAPER_TYPE_PREFERENCE.index(new_pubtype)
            old_idx = len(PAPER_TYPE_PREFERENCE)-1
            if match.pubtype in PAPER_TYPE_PREFERENCE:
                old_idx = PAPER_TYPE_PREFERENCE.index(match.pubtype)
            if idx < old_idx:
                changed = True
                match.pubtype = PAPER_TYPE_PREFERENCE[idx]

        self.records_list[matching_idx] = oairecord.serialize()

    # update the publication date
    self.pubdate = datetime_to_date(self.pubdate)
    if oairecord.pubdate:
        new_pubdate = datetime_to_date(oairecord.pubdate)
        if new_pubdate > self.pubdate:
            self.pubdate = new_pubdate


def populate_records(apps, schema_editor):
    Paper = apps.get_model('papers', 'Paper')
    OaiRecord = apps.get_model('papers', 'OaiRecord')

    lastpk = 0
    bs = 500
    found = True
    while found:
        found = False
        print lastpk
    
        papers = list(Paper.objects.filter(pk__gt=lastpk).order_by('id')[:bs])
        if not papers:
            break
        found = True

        new_lastpk = papers[-1].pk

        records_list = OaiRecord.objects.filter(about_id__gt=lastpk,
                about_id__lte=new_lastpk)
        records = defaultdict(list)
        for record in records_list:
            records[record.about_id].append(record)
        
        updated = []
        for p in papers:
            for r in records[p.id]:
                add_oairecord(p, r)
            updated.append(p)
        bulk_update(updated, update_fields=['records_list'])
        lastpk = new_lastpk

def do_nothing(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('papers', '0042_paper_records_list'),
    ]

    operations = [
        migrations.RunPython(populate_records, do_nothing),
    ]
